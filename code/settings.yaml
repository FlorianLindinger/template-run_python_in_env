# SETTINGS FILE (SEE ON BOTTOM HOW TO USE AND IMPORT IN PYTHON)
# LEAVE A SPACE AFTER THE ":" (e.g. name: value)
####################################################################
####################################################################

####################################################################
# important settings:
####################################################################

example 1: a string
example 2: "a string"
example 3: 1
example 4: 1.2
example 5: true
example 6: True
example 7:
example 8: 1e3
example 9: 1.4e2/5e2
example 10: 1+5e1

####################################################################
# less important settings:
####################################################################




####################################################################
####################################################################
# how to import variables in python:
####################################################################

# --- in code.py: ---
# import yaml  # install as pyyaml                                      # nopep8
# import re                                                             # nopep8
# with open("settings.yaml") as file:				    	                      # nopep8
#     s = yaml.safe_load(file)  # get values with s["name"]	            # nopep8
# # Fix what yaml can't interpret: Converts scientific noation (as axepted in python) and math operation (+-*/) of 2 float convertables (including scientific notaion) to float
# float_regex=r"\s*[-+]?(?:\d+\.?\d*|\.\d+)(?:[eE][-+]?\d+)?\s*" #identifies strings that python recognises as float convertable # nopep8
# is_match=lambda x,symbol: (isinstance(x, str) and bool(re.match(f"^{float_regex}[{symbol}]{float_regex}$", x))) #test if string & if math operation between 2 float convertables # nopep8
# s = {key: float(val) if (isinstance(val, str) and bool(re.match(f"^{float_regex}$",val))) else val for key, val in s.items()}  #convert to float # nopep8                                
# s = {key: float(val.split("*" )[0])*float(val.split("*" )[1]) if is_match(val,"*" ) else val for key, val in s.items()}        #convert to float # nopep8   
# s = {key: float(val.split(r"/")[0])/float(val.split(r"/")[1]) if is_match(val,r"/") else val for key, val in s.items()}        #convert to float # nopep8   
# s = {key: float(val.split("+" )[0])+float(val.split("+" )[1]) if is_match(val,"+" ) else val for key, val in s.items()}        #convert to float # nopep8   
# s = {key: float(val.split("-" )[0])-float(val.split("-" )[1]) if is_match(val,"-" ) else val for key, val in s.items()}        #convert to float # nopep8   

# s["example 1"] == "a string"
# s["example 2"] == "a string"
# s["example 3"] == 1
# s["example 4"] == 1.2
# s["example 5"] == True
# s["example 6"] == True
# s["example 7"] == None
# s["example 8"] == 1000.0
# s["example 9"] == 0.28
# s["example 10"] == 51.0

####################################################################
####################################################################



